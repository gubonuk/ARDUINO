#include <Wire.h>

// MPU9250 레지스터 주소
#define MPU9250_ADDRESS 0x68
#define GYRO_CONFIG     0x1B
#define GYRO_XOUT_H     0x43
#define PWR_MGMT_1      0x6B

// 자이로스코프 스케일 설정
#define GYRO_SCALE_500DPS 0x08

// 변환 상수
float gyroScale = 500.0/32768.0; // ±500 deg/s 범위

// 자이로스코프 데이터 변수
int16_t gx, gy, gz;
float gyroX, gyroY, gyroZ;
float gyroXOffset = 0, gyroYOffset = 0, gyroZOffset = 0;

// 속도 관련 변수
float rotationSpeed = 0;    // 회전 속도 (deg/s)
float linearSpeed = 0;      // 선형 속도 (m/s)
float wheelRadius = 0.05;   // 바퀴 반지름 (m) - 실제 값으로 조정 필요

// 시간 관련 변수
unsigned long lastTime = 0;
unsigned long sampleTime = 10; // 센서 샘플링 간격 (밀리초)

// I2C 레지스터에서 바이트 읽기
uint8_t readByte(uint8_t address, uint8_t reg) {
  Wire.beginTransmission(address);
  Wire.write(reg);
  Wire.endTransmission(false);
  Wire.requestFrom(address, (uint8_t)1);
  return Wire.read();
}

// I2C 레지스터에 바이트 쓰기
void writeByte(uint8_t address, uint8_t reg, uint8_t data) {
  Wire.beginTransmission(address);
  Wire.write(reg);
  Wire.write(data);
  Wire.endTransmission();
}

// 여러 바이트 읽기
void readBytes(uint8_t address, uint8_t reg, uint8_t count, uint8_t *dest) {
  Wire.beginTransmission(address);
  Wire.write(reg);
  Wire.endTransmission(false);
  Wire.requestFrom(address, count);
  uint8_t i = 0;
  while (Wire.available()) {
    dest[i++] = Wire.read();
  }
}

void setup() {
  // I2C 초기화
  Wire.begin();
  
  // 시리얼 통신 초기화
  Serial.begin(115200);
  
  // 센서 깨우기
  writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
  delay(100);
  
  // 자이로스코프 설정 (±500 deg/s 범위)
  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, GYRO_SCALE_500DPS);
  
  Serial.println(F("자이로스코프 보정 중..."));
  calibrateGyro();
  Serial.println(F("보정 완료"));
  
  Serial.print(F("바퀴 반지름: "));
  Serial.print(wheelRadius * 100);
  Serial.println(F(" cm"));
  Serial.println(F("선형 속도 측정 시작"));
  lastTime = millis();
}

void loop() {
  if (millis() - lastTime > sampleTime) {
    lastTime = millis();
    
    // 자이로스코프 데이터 읽기
    readGyroData();
    
    // 회전 속도 계산 (주로 Z축 자이로스코프 사용)
    // 선형 모션의 경우 전진/후진은 보통 Z축 회전에 해당
    rotationSpeed = abs(gyroZ);  // Z축 회전 속도 사용 (deg/s)
    
    // 선형 속도 계산: v = ω * r
    // ω = 각속도(rad/s), r = 바퀴 반지름(m)
    // 각속도를 라디안으로 변환: ω(rad/s) = ω(deg/s) * π/180
    float angularVelocityRad = rotationSpeed * PI / 180.0;  
    linearSpeed = angularVelocityRad * wheelRadius;
    
    // 선형 속도 출력 (m/s 및 km/h)
    Serial.print(F("속도: "));
    Serial.print(linearSpeed, 3);
    Serial.print(F(" m/s ("));
    Serial.print(linearSpeed * 3.6, 2);  // m/s를 km/h로 변환
    Serial.print(F(" km/h) | 회전속도: "));
    Serial.print(rotationSpeed, 1);
    Serial.println(F(" deg/s"));
  }
}

// 자이로스코프 보정
void calibrateGyro() {
  float sumX = 0, sumY = 0, sumZ = 0;
  int samples = 100;
  
  for (int i = 0; i < samples; i++) {
    uint8_t rawData[6];
    readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, rawData);
    
    int16_t tempGx = (((int16_t)rawData[0]) << 8) | rawData[1];
    int16_t tempGy = (((int16_t)rawData[2]) << 8) | rawData[3];
    int16_t tempGz = (((int16_t)rawData[4]) << 8) | rawData[5];
    
    sumX += tempGx * gyroScale;
    sumY += tempGy * gyroScale;
    sumZ += tempGz * gyroScale;
    
    delay(5);
  }
  
  // 평균값을 오프셋으로 설정
  gyroXOffset = sumX / samples;
  gyroYOffset = sumY / samples;
  gyroZOffset = sumZ / samples;
}

// 자이로스코프 데이터 읽기
void readGyroData() {
  uint8_t rawData[6];
  readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, rawData);
  
  // 2바이트 값 조합
  gx = (((int16_t)rawData[0]) << 8) | rawData[1];
  gy = (((int16_t)rawData[2]) << 8) | rawData[3];
  gz = (((int16_t)rawData[4]) << 8) | rawData[5];
  
  // 물리적 단위(deg/s)로 변환 및 오프셋 적용
  gyroX = gx * gyroScale - gyroXOffset;
  gyroY = gy * gyroScale - gyroYOffset;
  gyroZ = gz * gyroScale - gyroZOffset;
  
  // 노이즈 필터링 (작은 값은 0으로)
  if (abs(gyroX) < 1.0) gyroX = 0;
  if (abs(gyroY) < 1.0) gyroY = 0;
  if (abs(gyroZ) < 1.0) gyroZ = 0;
}
